class Game{constructor(){this.baseURL=window.location.origin,this.developerMode="http://127.0.0.1:5500"===this.baseURL,this.choice=[{value:"rock",beats:["scissors","lizard"]},{value:"paper",beats:["rock","spock"]},{value:"scissors",beats:["paper","lizard"]},{value:"lizard",beats:["paper","spock"]},{value:"spock",beats:["rock","scissors"]}],this.language=localStorage.getItem("language")||"hu",this.darkmode=localStorage.getItem("darkmode")||"ligth",this.playerNames=["player","computer"],this.imageLoaded=0,this.statisticMode="values",this.dictionary={en:{rock:"rock",paper:"paper",scissors:"scissors",lizard:"lizard",spock:"Spock",paperT:"paper",scissorsT:"scissors",lizardT:"lizard",spockT:"Spock",gameRules:"Game rules",rulesDesc:'Use the arrows to set your threw,<br />then click to "check" to start the game!',beats:"beats",and:"and",popupInstruction:"Click the popup to close it!",youThrew:"You threw",CPUThrew:"CPU threw",popupClosing:"Closing popup...",popupClosingIn:"Closing in",popupTimeout:"seconds",resultTie:"It's a tie!",resultPlayerWon:"You won!",resultComputerWon:"Computer wins!",computerName:"Computer",playerName:"Player",summary:"Summary",threws:"Threws",wins:"wins",error:"Error! You must select a valid option!"},de:{rock:"Stein",paper:"Papier",scissors:"Schere",lizard:"Echse",spock:"Spock",gameRules:"Spielregeln",paperT:"Papier",scissorsT:"Schere",lizardT:"Echse",spockT:"Spock",gameRules:"Spielregeln",rulesDesc:'Benutze die Pfeile, um deinen Wurf einzustellen, <br /> dann klicke auf "Häkchen", um das Spiel zu starten!',beats:"schlägt",and:"und",popupInstruction:"Klick auf das Popup-Fenster, um zu schließen!",youThrew:"Du hast geworfen",CPUThrew:"Der Computer hat geworfen",popupClosing:"Das Popup wird geschlossen!",popupClosingIn:"Schließt in",popupTimeout:"Sekunden",resultTie:"Unentschieden!",resultPlayerWon:"Du hast gewonnen!",resultComputerWon:"Der Computer hat gewonnen!",computerName:"Komputer",playerName:"Spieler",summary:"Insgesammt",threws:"geworfen",wins:"Gewinnt",error:"Fehler! Du musst eine gültige Option auswählen!"},hu:{rock:"kő",paper:"papír",scissors:"olló",lizard:"gyík",spock:"Spock",rockT:"követ",paperT:"papírt",scissorsT:"ollót",lizardT:"gyíkot",spockT:"Spockot",gameRules:"Játékszabályok",rulesDesc:'A nyilakkal a válaszd ki amit mutatni akarsz,<br />majd kattintson a "pipa" gombra a játék indításához!',beats:"üti",and:"és",popupInstruction:"Kattints a felugró ablakra a bezáráshoz!",youThrew:"Te mutattál",CPUThrew:"A CPU mutatott",popupClosing:"A felugró ablak bezárása...",popupClosingIn:"Bezáródik",popupTimeout:"másodperc múlva",resultTie:"Döntetlen!",resultPlayerWon:"Nyertél!",resultComputerWon:"A CPU nyert!",computerName:"Számítógép",playerName:"Játékos",summary:"Összesen",threws:"Mutatott",wins:"Nyert",error:"Hiba! Érvénytelen választás!"}},this.statistics={},this.userChoiceIndex=Math.floor(Math.random()*this.choice.length),this.userChoice=this.choice[this.userChoiceIndex],this.computerChoiceIndex=Math.floor(Math.random()*this.choice.length),this.computerChoice=this.choice[this.computerChoiceIndex],this.computerRollLength=15,this.popupTimeout=3,this.getDomELements(),this.initialize()}getDomELements(){this.app=document.getElementById("app"),this.menu=document.getElementById("menu"),this.settings=document.getElementById("settings"),this.loaderScreen=document.getElementById("loader-screen"),this.favicon=document.querySelector("#favicon"),this.startButton=document.querySelector(".start.button"),this.nextButton=document.querySelector(".next.button"),this.prevButton=document.querySelector(".prev.button"),this.rulesButton=document.querySelector(".rules.button"),this.statButton=document.querySelector(".statistics.button"),this.langButton=document.querySelector(".language.button"),this.licensingButton=document.querySelector(".licensing.button"),this.statisticsButton=document.querySelector(".statistics.button"),this.settingsButton=document.querySelector(".settings.button"),this.lightdark=document.querySelector(".lightdark.button"),this.rulesModal=document.querySelector(".rules.modal"),this.resultModal=document.querySelector(".result.modal"),this.languageModal=document.querySelector(".language.modal"),this.statisticsModal=document.querySelector(".statistics.modal"),this.licensingModal=document.querySelector(".licensing.modal"),this.statisticsClose=document.querySelector(".statistics.closeButton"),this.rulesClose=document.querySelector(".rules.closeButton"),this.languageClose=document.querySelector(".language.closeButton"),this.resultClose=document.querySelector(".result.closeButton"),this.licensingClose=document.querySelector(".licensing.closeButton"),this.statisticsTable=document.querySelector(".table-container"),this.statisticsInput=document.querySelector("#statistics-input"),this.resultContainer=document.querySelector(".result-container"),this.langChange=Array.from(document.querySelectorAll(".language-button")),this.playerName=document.querySelector("#player-name"),this.computerName=document.querySelector("#computer-name"),this.computerWins=document.querySelector(".computer-wins"),this.userWins=document.querySelector(".user-wins"),this.mainTitle=document.querySelector("#main-title"),this.playerImages=Array.from(document.querySelectorAll(".images.player")),this.computerImages=Array.from(document.querySelectorAll(".images.computer"))}initializeImages(){const images=Array.from(document.querySelectorAll(".loader-image"));this.imageCount=images.length,images.forEach(image=>this.asynImageLoader(image))}asynImageLoader(img){const fileName=img.dataset.filename,url=`${this.baseURL}/${this.developerMode?"":"rpsls/"}${fileName}`;fetch(url).then(response=>response.blob().then(blob=>{img.src=URL.createObjectURL(blob),img.alt=`image: ${fileName.split(".")[0]}`,img.classList.remove("loader-image");const loaded=img.addEventListener("load",()=>{this.imageLoaded++,this.imageLoaded===this.imageCount&&(this.app.classList.remove("off"),this.loaderScreen.classList.add("off"),this.loaderScreen.addEventListener("transitionend",()=>this.loaderScreen.remove()))},{once:!0})}).catch(error=>console.log(error)))}initTitleChange(){setInterval(()=>{const choice=this.choice[Math.floor(Math.random()*this.choice.length)],choiceName=this.getTranslation(choice.value);document.title=choiceName[0].toUpperCase()+choiceName.substring(1)+"!",this.favicon.href=`./media/${choice.value}.png`},1e3)}setScores(){const results={};Object.keys(this.statistics).forEach(player=>{results[player]=Object.keys(this.statistics[player]).reduce((sum,threw)=>sum+ +this.statistics[player][threw],0)}),this.computerWins.innerHTML=results.computer,this.userWins.innerHTML=results.player}nextThrew(){this.userChoiceIndex++,this.userChoiceIndex>this.choice.length-1&&(this.userChoiceIndex=0),this.userChoice=this.choice[this.userChoiceIndex],this.setUserChoiceImage()}prevThrew(){this.userChoiceIndex--,this.userChoiceIndex<0&&(this.userChoiceIndex=this.choice.length-1),this.userChoice=this.choice[this.userChoiceIndex],this.setUserChoiceImage()}startGame(){for(let i=0;i<this.computerRollLength;i++)setTimeout(()=>{this.computerChoiceIndex=Math.floor(Math.random()*this.choice.length),this.computerChoice=this.choice[this.computerChoiceIndex],this.setComputerChoiceImage(),0===i&&(this.determineWinner(),this.initializeStatistics(),this.showResult())},10*(this.computerRollLength+1-i)*(this.computerRollLength+1-i))}lightChange(){const changeDark=[this.app.parentElement,this.app,this.rulesModal,this.resultModal,this.languageModal,this.licensingModal,this.statisticsModal,this.settings,this.statisticsInput];changeDark.forEach(elem=>elem.classList.toggle("dark")),localStorage.setItem("darkmode",this.app.parentElement.classList.contains("dark")),Array.from(this.lightdark.children).forEach(icon=>{icon.classList.toggle("on"),icon.classList.toggle("off")})}showMenu(){this.settings.classList.toggle("out")}initButton(button,cb){button.addEventListener("click",e=>{e.preventDefault(),cb()})}initializeButtons(){const buttonActions=[{button:this.nextButton,action:this.nextThrew.bind(this)},{button:this.prevButton,action:this.prevThrew.bind(this)},{button:this.startButton,action:this.startGame.bind(this)},{button:this.settingsButton,action:this.showMenu.bind(this)},{button:this.lightdark,action:this.lightChange.bind(this)}];buttonActions.forEach(({button:button,action:action})=>this.initButton(button,action))}initModal(activator,modal){this.makeArray(activator).forEach(elem=>{elem.addEventListener("click",()=>{modal.classList.toggle("show")})})}initializeModals(){const modalMaps=[{activator:[this.rulesButton,this.rulesClose],modal:this.rulesModal},{activator:[this.langButton,this.languageClose],modal:this.languageModal},{activator:[this.licensingButton,this.licensingClose],modal:this.licensingModal},{activator:[this.statisticsButton,this.statisticsClose],modal:this.statisticsModal},{activator:this.resultModal,modal:this.resultModal}];modalMaps.forEach(({activator:activator,modal:modal})=>{this.initModal(activator,modal)}),this.langChange.forEach(lc=>{lc.addEventListener("click",e=>{this.language=lc.dataset.lang,this.updateLang()})})}makeArray(arr){return Array.isArray(arr)?arr:[arr]}setUserChoiceImage(){this.setHidden(this.playerImages,this.userChoice)}setComputerChoiceImage(){this.setHidden(this.computerImages,this.computerChoice)}setHidden(images,choiced){images.forEach(img=>img.classList.add("hidden")),images.filter(img=>img.id===choiced.value)[0].classList.remove("hidden")}getUserChoice(userInputStr){const userChoiceObj=this.getChoice(userInputStr);this.userChoice=this.choice.map(item=>item.name===userChoiceObj.name).reduce((acc,curr)=>acc+ +curr)>0?userChoiceObj:alert(this.dictionary[this.language].error)}getComputerChoice(){this.computerChoice=this.choice[Math.floor(Math.random()*this.choice.length)]}determineWinner(){let playerWins=null;this.result=this.getTranslation("resultTie"),this.userChoice.beats.includes(this.computerChoice.value)&&(playerWins=!0,this.result=this.getTranslation("resultPlayerWon")),this.computerChoice.beats.includes(this.userChoice.value)&&(playerWins=!1,this.result=this.getTranslation("resultComputerWon")),this.setScores(),this.calculateStatistics(playerWins)}calculateStatistics(playerWins){let winner,looser;!0===playerWins&&(winner=this.userChoice.value,looser=this.computerChoice.value,this.statistics.player[winner]=this.statistics.player[winner]+1),!1===playerWins&&(winner=this.computerChoice.value,looser=this.userChoice.value,this.statistics.computer[winner]=this.statistics.computer[winner]+1),this.updateStatistics(),this.createStatistics()}initStatisticsMode(){this.statisticsInput.addEventListener("change",e=>{e.preventDefault(),this.statisticMode=this.statisticsInput.value,this.createStatistics()})}createStatistics(){const header=["wins",...this.playerNames.map(pn=>pn+"Name"),"summary"],allGame=+this.computerWins.innerHTML+ +this.userWins.innerHTML,table=`<table><thead>\n      <tr>${header.map((col,index)=>`<th>${this.getTranslation(col)}</th>`).join("")}</tr>\n      </thead><tbody>\n      ${Object.keys(this.statistics.player).map(threw=>`\n            <tr>\n              <td class="player-cell">${this.getTranslation(threw)}</td>\n              <td class="player-cell" style="text-align:center">${"values"===this.statisticMode?+this.statistics.player[threw]:(+this.statistics.player[threw]/allGame*100).toFixed(1)+"%"}</td>\n              <td class="computer-cell" style="text-align:center">${"values"===this.statisticMode?+this.statistics.computer[threw]:(+this.statistics.computer[threw]/allGame*100).toFixed(1)+"%"}</td>\n              <td class="summary-cell" style="text-align:center">${"values"===this.statisticMode?+this.statistics.computer[threw]+ +this.statistics.computer[threw]:((+this.statistics.player[threw]+ +this.statistics.computer[threw])/allGame*100).toFixed(1)+"%"}</td>\n            </tr>`).join("")}\n        <tfoot>\n          <tr>${[this.getTranslation("summary"),"values"===this.statisticMode?+this.userWins.innerHTML:(+this.userWins.innerHTML/allGame*100).toFixed(1)+"%","values"===this.statisticMode?+this.computerWins.innerHTML:(+this.computerWins.innerHTML/allGame*100).toFixed(1)+"%","values"===this.statisticMode?+this.computerWins.innerHTML+ +this.userWins.innerHTML:"100%"].map(footer=>`<th>${footer}</th>`).join("")}</tr>\n        </tfoot>\n      </tbody></table>`;this.statisticsTable.innerHTML=table}getTranslation(string){return this.dictionary[this.language][string]}getChoice(userChoice){return this.choice[Object.keys(this.choice).filter(c=>this.choice[c].value===userChoice.toLowerCase())[0]]}generateRules(){this.rules=`\n    <h2>${this.getTranslation("gameRules")}:</h2>\n    <p>${this.getTranslation("rulesDesc")}</p>\n    ${this.choice.map(c=>`<p>${this.getTranslation(c.value)} ${this.getTranslation("beats")} ${c.beats.map(b=>this.getTranslation(b+"T")).join(` ${this.getTranslation("and")} `)}.</p>`).join("")}\n    <p style="color: red">${this.getTranslation("popupInstruction")}</p>`,this.rulesModal.querySelector(".rules-text").innerHTML=this.rules}showResult(){this.resultContainer.innerHTML=`\n    <h2>${this.result}</h2>\n    <p>${this.getTranslation("youThrew")} ${this.getTranslation(this.userChoice.value+"T")}</p>\n    <p>${this.getTranslation("CPUThrew")} ${this.getTranslation(this.computerChoice.value+"T")}</p>`;const counter=document.createElement("p");this.resultModal.appendChild(counter),counter.classList.add("counter"),this.resultModal.classList.add("show");for(let i=this.popupTimeout;i>=0;i--)setTimeout(()=>{0===i?(counter.innerHTML=this.getTranslation("popupClosing"),this.resultModal.classList.remove("show")):counter.innerHTML=`${this.getTranslation("popupClosingIn")} <span style="width:1.2rem;display:inline-block;">${i}</span> ${this.getTranslation("popupTimeout")}...`},3e3*(this.popupTimeout-i))}getTitle(){return this.choice.map(threw=>this.getTranslation(threw.value)).join(", ")}updateLang(){this.generateRules(),this.createStatistics(),this.playerName.innerHTML=this.getTranslation("playerName"),this.computerName.innerHTML=this.getTranslation("computerName"),this.mainTitle.innerHTML=this.getTitle(),document.documentElement.setAttribute("lang",this.language),localStorage.setItem("language",this.language)}initializeStatistics(){const oldStat=localStorage.getItem("statistics");oldStat?this.statistics=JSON.parse(oldStat):this.playerNames.forEach(player=>{this.statistics[player]={},this.choice.forEach(item=>{this.statistics[player][item.value]=0})}),this.setScores()}updateStatistics(){localStorage.setItem("statistics",JSON.stringify(this.statistics))}initilizeDarkmode(){"true"===this.darkmode&&this.lightChange()}initialize(){this.initializeImages(),window.onload=()=>{this.initilizeDarkmode(),this.initializeStatistics(),this.initializeButtons(),this.initializeModals(),this.setUserChoiceImage(),this.setComputerChoiceImage(),this.updateLang(),this.initTitleChange(),this.initStatisticsMode()}}}const game=new Game;
//# sourceMappingURL=app.min.js.map