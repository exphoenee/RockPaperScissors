class Game{constructor(){this.choice=[{value:"rock",beats:["scissors","lizard"]},{value:"paper",beats:["rock","spock"]},{value:"scissors",beats:["paper","lizard"]},{value:"lizard",beats:["paper","spock"]},{value:"spock",beats:["rock","scissors"]}],this.userChoiceIndex=0,this.userChoice=this.choice[this.userChoiceIndex],this.computerChoiceIndex=0,this.computerChoice=this.choice[this.computerChoiceIndex],this.computerRollLength=15,this.getDomELements(),this.initializeButton(),this.generateRules(),this.initialize()}getDomELements(){this.app=document.getElementById("app"),this.start=document.querySelector(".start"),this.next=document.querySelector(".next"),this.prev=document.querySelector(".prev"),this.rules=document.querySelector(".rules"),this.rulesModal=document.querySelector(".rules.modal"),this.resultModal=document.querySelector(".result.modal"),this.playerImages=Array.from(document.querySelectorAll(".images.player")),this.computerImages=Array.from(document.querySelectorAll(".images.computer"))}initializeButton(){this.next.addEventListener("click",e=>{e.preventDefault(),this.userChoiceIndex++,this.userChoiceIndex>this.choice.length-1&&(this.userChoiceIndex=0),this.userChoice=this.choice[this.userChoiceIndex],this.setUserChoiceImage()}),this.prev.addEventListener("click",e=>{e.preventDefault(),this.userChoiceIndex--,this.userChoiceIndex<0&&(this.userChoiceIndex=this.choice.length-1),this.userChoice=this.choice[this.userChoiceIndex],this.setUserChoiceImage()}),this.start.addEventListener("click",()=>{for(let i=0;i<this.computerRollLength;i++)setTimeout(()=>{this.computerChoiceIndex=Math.floor(Math.random()*this.choice.length),this.computerChoice=this.choice[this.computerChoiceIndex],this.setComputerChoiceImage(),0===i&&(this.determineWinner(),this.showResult())},10*(this.computerRollLength+1-i)*(this.computerRollLength+1-i))}),[this.rules,this.rulesModal].forEach(modal=>modal.addEventListener("click",()=>{this.rulesModal.classList.toggle("show")})),this.resultModal.addEventListener("click",()=>{this.resultModal.classList.toggle("show")})}setUserChoiceImage(){this.setHidden(this.playerImages,this.userChoice)}setComputerChoiceImage(){this.setHidden(this.computerImages,this.computerChoice)}setHidden(images,choiced){images.forEach(img=>img.classList.add("hidden")),images.filter(img=>img.id===choiced.value)[0].classList.remove("hidden")}getUserChoice(userInputStr){const userChoiceObj=this.getChoice(userInputStr);this.userChoice=this.choice.map(item=>item.name===userChoiceObj.name).reduce((acc,curr)=>acc+ +curr)>0?userChoiceObj:console.log("Error! You must select a valid option!")}getComputerChoice(){this.computerChoice=this.choice[Math.floor(5*Math.random())]}determineWinner(){this.result=this.userChoice.beats.includes(this.computerChoice.value)?"You win!":this.computerChoice.beats.includes(this.userChoice.value)?"Computer wins!":"This game is a tie!"}getChoice(userChoice){return this.choice[Object.keys(this.choice).filter(c=>this.choice[c].value===userChoice.toLowerCase())[0]]}generateRules(){this.rules=`\n    <h2>Game rules:</h2>\n    <p>Use the arrows to set your threw, then click to "check" to start the game!</p>\n    <p>${this.choice.map(c=>`${c.value} beats ${c.beats.join(" and ")}.</p>`).join("")}\n    <p style="color: red">Click here to close this popup!</p>`,this.rulesModal.innerHTML=this.rules}showResult(){this.resultModal.innerHTML=`\n    <h2>${this.result}</h2>\n    <p>You threw ${this.userChoice.value}</p>\n    <p>CPU threw ${this.computerChoice.value}</p>\n    <p style="color: red">Click here to close this popup!</p>`,this.resultModal.classList.add("show")}initialize(){this.setUserChoiceImage(),this.setComputerChoiceImage()}}const game=new Game;
//# sourceMappingURL=app.min.js.map